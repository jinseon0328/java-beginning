/* printf는 형식문자를 사용하여
출력할 내용을 형식에 맞추어 출력가능하다. 
 */

class Ex03Printf {
    public static void main(String[]args){
        //1. 10진법 정수('d'eciamal) ->%다음 d의 의미
        int number = 12345;
        //A. 10진법 정수를 그대로 표시하라
        System.out.printf("1-A. %d\n", number);
        //B. 10진법 정수를 오른쪽 정렬해서 총 10자리로 표시해라
        System.out.printf("1-B. %10d\n", number);
        //C. 10진법 정수를 왼쪽 정렬해서 총 10자리로 표시해라
        System.out.printf("1-C. %-10d(끝)\n", number);
        //D. 5자리 10진법 정수를 오른쪽 정렬해서 총 3자리로 표시해라
        System.out.printf("1-E. %3d\n", number);
        //   윗줄의 경우, 우리가 출력해야할 내용은 5자리이기 때문에
        //   지정한 자릿수보다 많다. 이럴때는 자릿수 지정이 무시가 된다.
        //E. 10진법 정수를 오른쪽 정렬해서 총 10자리로 표시하되 왼쪽 빈 공백은 0으로 채워라
        System.out.printf("1-F. %010d\n", number);
        System.out.println("--------------------------------------------------------------------------------");
        /*      %  -   or  +    3
          표시하라 왼쪽   오른쪽  몇자리로 표시
        */

        //2. 8진법 정수('o'ctal)
        //A. 8법 정수를 그대로 표시하라
        System.out.printf("2-A. %o\n", number);
        //B. 8진법 정수를 오른쪽 정렬해서 총 10자리로 표시해라
        System.out.printf("2-B. %10o\n", number);
        //C. 8진법 정수를 왼쪽 정렬해서 총 10자리로 표시해라
        System.out.printf("2-C. %-10o\n", number);
        //E. 8진법 정수를 오른쪽 정렬해서 총 10자리로 표시하되 왼쪽 빈 공백은 0으로 채워라
        System.out.printf("2-D. %010o\n", number);
        System.out.println("--------------------------------------------------------------------------------");
        //3. 16진법 정수 (he'x'adecimal)
        //A. 16진법 정수를 그대로 표시하되 알파벳이 존재할 경우 소문자로 표시하라 
        number = 247;
        System.out.printf("3-A. %x\n", number);
        //->x가 소문자일 경우 소문자 X일 경우 대문자
        //B. 16진법 정수를 그대로 표시하되 알파벳이 존재할 경우 소문자로 표시하라 
        System.out.printf("3-B. %X\n", number);
        //C. 16진법 정수를 오른쪽 정렬해서 5자리로 표시하되 알파벳이 존재할 경우 대문자로 표시하라 
        System.out.printf("3-C. %X\n", number);
        //D. 16진법 정수를 오른쪽 정렬해서 5자리로 표시하되 알파벳이 존재할 경우 대문자로 표시하라 
        System.out.printf("3-D. %5X\n", number);
        //E. 16진법 정수를 오른쪽 정렬해서 5자리로 표시하되 알파벳이 존재할 경우 소문자로 표시하라
        System.out.printf("3-E. %-5x\n", number); 
        //F. 16진법 정수를 오른쪽 정렬해서 5자리로 표시하되 알파벳이 존재할 경우 대문자로 표시하고
        //   왼쪽 빈공간은 0으로 채워라 
        System.out.printf("3-F. %05X\n", number);
        System.out.println("--------------------------------------------------------------------------------");
        /*3.실수('f'loat)
        비록 float을 줄여서 f를 사용하지만
        double도 형식화할 때는 f를 쓴다
        */
        double d = 1234.567890;
        // %d는 10진법 정수이므로
        //A. 실수를 그대로 출력하라
        System.out.printf("4-A. %f\n", d);
        //B. 실수를 오른쪽 정렬해서 15자리로 표시하라
        System.out.printf("4-B. %15f\n", d);
        //C. 실수를 소수점 두번째 자리까지 출력하라
        System.out.printf("4-C. %.2f\n", d);
        //D. 실수를 왼쪽 정렬해서 10자리로 표시하고 소수점은 두번째 자리까지 출력하라
        System.out.printf("4-D. %-10.2f(끝)\n",d);
        //-> .도 한자리 차지한다!
        //E. 실수를 오른쪽 정렬해서 10자리로 표시하고 소수점은 두번째 자리까지 출력하되
        //왼쪽 빈 공간은 0으로 채워라.
        System.out.printf("4-E. %010.2f\n",d);
        System.out.println("--------------------------------------------------------------------------------");
        //5. 문자열('S'tring)
        String string1 = "abcDEFghi";
        //A. 문자열을 그대로 출력해라
        System.out.printf("5-A. %s\n", string1);
        //B. 문자열을 모두 대문자로 출력해라
        System.out.printf("5-B. %S\n", string1);
        //C. 문자열을 오른쪽 정렬해서 15자리로 표시해라
        System.out.printf("5-C. %15s\n", string1);
        // 단, 문자열의 경우 왼쪽 공백을 0으로 채워라는 안 된다.
        // 왜냐하면 이게 없어서 0인지 아니면 정말 0이라는 글자가 있는 것인지 확인이 안 되기 때문이다!

        /* printf의 경우 우리가 여러개의 % 문자를 조합하여
        한개의 출력문을 만들어 줄 수 있다.
    
         */
        System.out.printf("이름: %s 학번:%s 학점 %.2f\n", "조재영", "비트0101000", 3.9999);

        //printf를 사용할 때 주의할 점
        // 1. 올바르지 않은 % 문자 사용시 에러
        //System.out.printf("이름: %y", "조재영");
        // -> 타입이 일치하지 않을 수 있고 존재하지 않은 자료일 경우 에러난다
        // 2. 문자와 뒤의 값의 종류가 호환이 안될 시에도 에러
        //System.out.printf("값: 2.f\n", "3");
        //3. %문자의 갯수가 뒤의 값의 갯수보다 적은 건 문제가 되지 않는다.
        System.out.printf("1. %d 2. %d\n", 1, 2, 3, 4);
        //   반대로 %문자의 갯수가 뒤의 값의 갯수보다 많으면 문제가 된다.
        //System.out.printf("1. %d 2. %d 3. %d", 1, 2 );








    
     }
}